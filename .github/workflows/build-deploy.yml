name: Build and Deploy APT Repository

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  repository_dispatch:
    types: [upload-package]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build-repository:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Pages
      uses: actions/configure-pages@v4

    - name: Install reprepro
      run: |
        sudo apt-get update
        sudo apt-get install -y reprepro gnupg

    - name: Import GPG key
      env:
        GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
        GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
      run: |
        if [ -n "$GPG_PRIVATE_KEY" ]; then
          echo "$GPG_PRIVATE_KEY" | gpg --batch --import
          echo "GPG key imported successfully"
        else
          echo "Warning: No GPG key found in secrets. Repository will not be signed."
          # Remove SignWith from distributions file temporarily
          sed -i '/SignWith:/d' conf/distributions
        fi

    - name: Download package from dispatch event
      if: github.event_name == 'repository_dispatch'
      run: |
        echo "Processing repository dispatch event"
        PACKAGE_URL="${{ github.event.client_payload.package_url }}"
        PACKAGE_NAME="${{ github.event.client_payload.package_name }}"
        DISTRIBUTION="${{ github.event.client_payload.distribution }}"
        
        if [ -n "$PACKAGE_URL" ] && [ -n "$PACKAGE_NAME" ]; then
          echo "Downloading package: $PACKAGE_NAME"
          mkdir -p incoming
          curl -L -o "incoming/$PACKAGE_NAME" "$PACKAGE_URL"
          echo "PACKAGE_FILE=incoming/$PACKAGE_NAME" >> $GITHUB_ENV
          echo "DISTRIBUTION=${DISTRIBUTION:-stable}" >> $GITHUB_ENV
        fi

    - name: Process incoming packages
      run: |
          echo "Processing incoming packages..."
          
          # Create necessary directories if they don't exist
          mkdir -p dists pool
          
          # Process stable packages
          for component in main contrib; do
            stable_dir="incoming/stable/$component"
            if [ -d "$stable_dir" ] && [ "$(ls -A $stable_dir/*.deb 2>/dev/null || true)" ]; then
              echo "Found packages in $stable_dir:"
              ls -la "$stable_dir/"
              
              for deb in "$stable_dir"/*.deb; do
                if [ -f "$deb" ]; then
                  echo "Adding $deb to stable distribution (component: $component)..."
                  reprepro -C "$component" includedeb stable "$deb"
                  rm "$deb"
                fi
              done
            else
              echo "No packages found in $stable_dir/"
            fi
          done
          
          # Process testing packages
          for component in main contrib; do
            testing_dir="incoming/testing/$component"
            if [ -d "$testing_dir" ] && [ "$(ls -A $testing_dir/*.deb 2>/dev/null || true)" ]; then
              echo "Found packages in $testing_dir:"
              ls -la "$testing_dir/"
              
              for deb in "$testing_dir"/*.deb; do
                if [ -f "$deb" ]; then
                  echo "Adding $deb to testing distribution (component: $component)..."
                  reprepro -C "$component" includedeb testing "$deb"
                  rm "$deb"
                fi
              done
            else
              echo "No packages found in $testing_dir/"
            fi
          done
          
          # Process any legacy packages in root incoming directory (for backwards compatibility)
          if [ -d incoming ] && [ "$(ls -A incoming/*.deb 2>/dev/null || true)" ]; then
            echo "Processing legacy packages in root incoming directory..."
            for deb_file in incoming/*.deb; do
              if [ -f "$deb_file" ]; then
                echo "Processing legacy package: $deb_file"
                package_name=$(dpkg-deb -f "$deb_file" Package)
                version=$(dpkg-deb -f "$deb_file" Version)
                
                # Default to stable for legacy uploads
                echo "Adding legacy package to stable distribution"
                reprepro includedeb stable "$deb_file"
                rm "$deb_file"
              fi
            done
          fi
          
          if [ ! -f incoming/stable/main/*.deb ] && [ ! -f incoming/stable/contrib/*.deb ] && [ ! -f incoming/testing/main/*.deb ] && [ ! -f incoming/testing/contrib/*.deb ] && [ ! -f incoming/*.deb ]; then
            echo "No new packages to process"
          fi

    - name: Generate repository metadata
      run: |
        # Export repository
        reprepro export
        
        # Generate package lists
        echo "Repository contents:" > repository-info.txt
        reprepro list stable >> repository-info.txt 2>/dev/null || true
        reprepro list testing >> repository-info.txt 2>/dev/null || true
        
        # Debug: Check what directories were created
        echo "=== Debugging: Directory structure after reprepro ==="
        ls -la
        echo "=== Contents of dists/ directory ==="
        ls -la dists/ || echo "dists/ directory not found"
        echo "=== Contents of pool/ directory ==="
        ls -la pool/ || echo "pool/ directory not found"
        echo "=== Full directory tree ==="
        find . -type d | head -20

    - name: Create index page
      run: |
        cat > index.html << 'EOF'
        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>ADB APT Repository</title>
            <style>
                body { font-family: Arial, sans-serif; margin: 40px; }
                .container { max-width: 800px; }
                pre { background: #f4f4f4; padding: 10px; border-radius: 5px; }
                .command { background: #2d3748; color: #e2e8f0; padding: 15px; border-radius: 5px; }
            </style>
        </head>
        <body>
            <div class="container">
                <h1>ADB APT Repository</h1>
                <p>Welcome to the ADB APT repository. This repository hosts Debian packages.</p>
                
                <h2>Quick Setup</h2>
                <p>Add this repository to your system:</p>
                <pre class="command">
        # Add the repository
        echo "deb https://adambirds.github.io/adb-apt-repo stable main" | sudo tee /etc/apt/sources.list.d/adb-apt-repo.list
        
        # Add the GPG key
        curl -fsSL https://adambirds.github.io/adb-apt-repo/pubkey.gpg | sudo apt-key add -
        
        # Update package list
        sudo apt update
                </pre>
                
                <h2>Available Distributions</h2>
                <ul>
                    <li><strong>stable</strong> - Stable packages</li>
                    <li><strong>testing</strong> - Testing packages</li>
                </ul>
                
                <h2>Available Components</h2>
                <ul>
                    <li><strong>main</strong> - Main packages</li>
                    <li><strong>contrib</strong> - Contributed packages</li>
                </ul>
                
                <h2>Repository Information</h2>
                <ul>
                    <li><a href="./dists/">Browse distributions</a></li>
                    <li><a href="./pool/">Browse packages</a></li>
                    <li><a href="./pubkey.gpg">Download GPG public key</a></li>
                </ul>
                
                <p><em>Last updated: $(date)</em></p>
            </div>
        </body>
        </html>
        EOF

    - name: Create directory index files for GitHub Pages
      run: |
        # Create a script to generate index.html for any directory
        cat > generate_indexes.sh << 'EOF'
        #!/bin/bash
        
        generate_index() {
            local dir="$1"
            local title="APT Repository - $(echo "$dir" | sed 's|^./||' | sed 's|/$||')"
            
            cat > "$dir/index.html" << HTML
        <!DOCTYPE html>
        <html>
        <head>
            <title>$title</title>
            <style>
                body { font-family: Arial, sans-serif; margin: 20px; }
                .container { max-width: 800px; }
                .breadcrumb { color: #666; margin-bottom: 20px; }
                ul { list-style-type: none; padding: 0; }
                li { margin: 5px 0; }
                a { text-decoration: none; color: #0366d6; }
                a:hover { text-decoration: underline; }
                .dir { font-weight: bold; }
                .file { color: #333; }
            </style>
        </head>
        <body>
            <div class="container">
                <div class="breadcrumb">$dir</div>
                <h1>$(basename "$dir")</h1>
                <ul>
        HTML
            
            # Add parent directory link if not root
            if [ "$dir" != "./" ] && [ "$dir" != "." ]; then
                echo '                    <li><a href="../" class="dir">üìÅ ../</a></li>' >> "$dir/index.html"
            fi
            
            # List directories first
            for item in "$dir"*/; do
                if [ -d "$item" ] && [ "$(basename "$item")" != ".git" ] && [ "$(basename "$item")" != ".github" ]; then
                    name=$(basename "$item")
                    echo "                    <li><a href=\"$name/\" class=\"dir\">üìÅ $name/</a></li>" >> "$dir/index.html"
                fi
            done
            
            # Then list files
            for item in "$dir"*; do
                if [ -f "$item" ] && [ "$(basename "$item")" != "index.html" ]; then
                    name=$(basename "$item")
                    if [[ "$name" == *.deb ]]; then
                        echo "                    <li><a href=\"$name\" class=\"file\">üì¶ $name</a></li>" >> "$dir/index.html"
                    else
                        echo "                    <li><a href=\"$name\" class=\"file\">üìÑ $name</a></li>" >> "$dir/index.html"
                    fi
                fi
            done
            
            cat >> "$dir/index.html" << 'HTML'
                </ul>
            </div>
        </body>
        </html>
        HTML
        }
        
        # Generate index files for all directories that need them
        find . -type d -not -path './.git*' -not -path './db*' | while read -r dir; do
            # Skip if directory is empty or only contains hidden files
            if [ "$(ls -A "$dir" 2>/dev/null | grep -v '^\.' | head -1)" ]; then
                generate_index "$dir"
                echo "Generated index for: $dir"
            fi
        done
        EOF
        
        chmod +x generate_indexes.sh
        ./generate_indexes.sh
        
        # Create .nojekyll to prevent GitHub Pages from processing files
        touch .nojekyll
        
        echo "Dynamically generated index files for all directories"

    - name: Debug artifact contents before upload
      run: |
        echo "=== Final directory structure before upload ==="
        ls -la
        echo "=== Files to be uploaded ==="
        find . -type f | grep -E "(dists|pool|index\.html)" | head -20
        echo "=== Total file count ==="
        find . -type f | wc -l

    - name: Upload Pages artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: .

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build-repository
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
