name: Build and Deploy APT Repository

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  repository_dispatch:
    types: [upload-package]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build-repository:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Pages
      uses: actions/configure-pages@v4

    - name: Install reprepro
      run: |
        sudo apt-get update
        sudo apt-get install -y reprepro gnupg

    - name: Import GPG key
      env:
        GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
        GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
      run: |
        if [ -n "$GPG_PRIVATE_KEY" ]; then
          echo "$GPG_PRIVATE_KEY" | gpg --batch --import
          echo "GPG key imported successfully"
        else
          echo "Warning: No GPG key found in secrets. Repository will not be signed."
          # Remove SignWith from distributions file temporarily
          sed -i '/SignWith:/d' conf/distributions
        fi

    - name: Download package from dispatch event
      if: github.event_name == 'repository_dispatch'
      run: |
        echo "Processing repository dispatch event"
        PACKAGE_URL="${{ github.event.client_payload.package_url }}"
        PACKAGE_NAME="${{ github.event.client_payload.package_name }}"
        DISTRIBUTION="${{ github.event.client_payload.distribution }}"
        
        if [ -n "$PACKAGE_URL" ] && [ -n "$PACKAGE_NAME" ]; then
          echo "Downloading package: $PACKAGE_NAME"
          mkdir -p incoming
          curl -L -o "incoming/$PACKAGE_NAME" "$PACKAGE_URL"
          echo "PACKAGE_FILE=incoming/$PACKAGE_NAME" >> $GITHUB_ENV
          echo "DISTRIBUTION=${DISTRIBUTION:-stable}" >> $GITHUB_ENV
        fi

    - name: Process incoming packages
      run: |
          echo "Processing incoming packages..."
          
          # Create necessary directories if they don't exist
          mkdir -p dists pool
          
          # Process stable packages
          for component in main contrib; do
            stable_dir="incoming/stable/$component"
            if [ -d "$stable_dir" ] && [ "$(ls -A $stable_dir/*.deb 2>/dev/null || true)" ]; then
              echo "Found packages in $stable_dir:"
              ls -la "$stable_dir/"
              
              for deb in "$stable_dir"/*.deb; do
                if [ -f "$deb" ]; then
                  echo "Adding $deb to stable distribution (component: $component)..."
                  reprepro -C "$component" includedeb stable "$deb"
                  rm "$deb"
                fi
              done
            else
              echo "No packages found in $stable_dir/"
            fi
          done
          
          # Process testing packages
          for component in main contrib; do
            testing_dir="incoming/testing/$component"
            if [ -d "$testing_dir" ] && [ "$(ls -A $testing_dir/*.deb 2>/dev/null || true)" ]; then
              echo "Found packages in $testing_dir:"
              ls -la "$testing_dir/"
              
              for deb in "$testing_dir"/*.deb; do
                if [ -f "$deb" ]; then
                  echo "Adding $deb to testing distribution (component: $component)..."
                  reprepro -C "$component" includedeb testing "$deb"
                  rm "$deb"
                fi
              done
            else
              echo "No packages found in $testing_dir/"
            fi
          done
          
          # Process any legacy packages in root incoming directory (for backwards compatibility)
          if [ -d incoming ] && [ "$(ls -A incoming/*.deb 2>/dev/null || true)" ]; then
            echo "Processing legacy packages in root incoming directory..."
            for deb_file in incoming/*.deb; do
              if [ -f "$deb_file" ]; then
                echo "Processing legacy package: $deb_file"
                package_name=$(dpkg-deb -f "$deb_file" Package)
                version=$(dpkg-deb -f "$deb_file" Version)
                
                # Default to stable for legacy uploads
                echo "Adding legacy package to stable distribution"
                reprepro includedeb stable "$deb_file"
                rm "$deb_file"
              fi
            done
          fi
          
          if [ ! -f incoming/stable/main/*.deb ] && [ ! -f incoming/stable/contrib/*.deb ] && [ ! -f incoming/testing/main/*.deb ] && [ ! -f incoming/testing/contrib/*.deb ] && [ ! -f incoming/*.deb ]; then
            echo "No new packages to process"
          fi

    - name: Generate repository metadata
      run: |
        # Export repository
        reprepro export
        
        # Generate package lists
        echo "Repository contents:" > repository-info.txt
        reprepro list stable >> repository-info.txt 2>/dev/null || true
        reprepro list testing >> repository-info.txt 2>/dev/null || true

    - name: Create index page
      run: |
        # Copy the template and replace the placeholder
        cp templates/index.html index.html
        sed -i "s|{{LAST_UPDATED}}|$(date)|g" index.html

    - name: Create directory index pages
      run: |
        # Create .nojekyll to prevent GitHub Pages from processing files
        touch .nojekyll
        
        # Source the template generator functions
        source templates/generate.sh
        
        # Create dists/index.html
        breadcrumb='<div class="breadcrumb"><a href="../">← Back to Repository</a></div>'
        content='<li><a href="stable/">📁 stable/</a><div class="description">Stable packages for production use</div></li><li><a href="testing/">📁 testing/</a><div class="description">Testing packages for development</div></li>'
        generate_directory_index "templates/directory.html" "dists/index.html" "Distributions" "Distributions" "Available distributions in this APT repository:" "$breadcrumb" "$content"
        
        # Create pool/index.html
        breadcrumb='<div class="breadcrumb"><a href="../">← Back to Repository</a></div>'
        content='<li><a href="main/">📁 main/</a><div class="description">Main component packages</div></li>'
        generate_directory_index "templates/directory.html" "pool/index.html" "Package Pool" "Package Pool" "Package pool organized by component:" "$breadcrumb" "$content"
        
        # Create dists/stable/index.html
        breadcrumb='<div class="breadcrumb"><a href="../">← Back to Distributions</a></div>'
        content='<li><a href="main/">📁 main/</a><div class="description">Main packages</div></li><li><a href="contrib/">📁 contrib/</a><div class="description">Contributed packages</div></li><li><a href="Release">📄 Release</a><div class="description">Distribution release information</div></li><li><a href="Release.gpg">🔑 Release.gpg</a><div class="description">GPG signature</div></li><li><a href="InRelease">📄 InRelease</a><div class="description">Inline signed release</div></li>'
        generate_directory_index "templates/directory.html" "dists/stable/index.html" "Stable Distribution" "Stable Distribution" "Components and metadata available in the stable distribution:" "$breadcrumb" "$content"
        
        # Create dists/testing/index.html
        breadcrumb='<div class="breadcrumb"><a href="../">← Back to Distributions</a></div>'
        content='<li><a href="main/">📁 main/</a><div class="description">Main packages</div></li><li><a href="contrib/">📁 contrib/</a><div class="description">Contributed packages</div></li><li><a href="Release">📄 Release</a><div class="description">Distribution release information</div></li><li><a href="Release.gpg">🔑 Release.gpg</a><div class="description">GPG signature</div></li><li><a href="InRelease">📄 InRelease</a><div class="description">Inline signed release</div></li>'
        generate_directory_index "templates/directory.html" "dists/testing/index.html" "Testing Distribution" "Testing Distribution" "Components and metadata available in the testing distribution:" "$breadcrumb" "$content"
        
        # Create dists/stable/main/index.html
        breadcrumb='<div class="breadcrumb"><a href="../">← Back to Stable</a></div>'
        content='<li><a href="binary-amd64/">📁 binary-amd64/</a><div class="description">AMD64 packages</div></li><li><a href="binary-arm64/">📁 binary-arm64/</a><div class="description">ARM64 packages</div></li><li><a href="binary-armhf/">📁 binary-armhf/</a><div class="description">ARM hard-float packages</div></li>'
        generate_directory_index "templates/directory.html" "dists/stable/main/index.html" "Stable/Main" "Stable - Main Component" "Binary packages for different architectures:" "$breadcrumb" "$content"
        
        # Create dists/testing/main/index.html
        breadcrumb='<div class="breadcrumb"><a href="../">← Back to Testing</a></div>'
        content='<li><a href="binary-amd64/">📁 binary-amd64/</a><div class="description">AMD64 packages</div></li><li><a href="binary-arm64/">📁 binary-arm64/</a><div class="description">ARM64 packages</div></li><li><a href="binary-armhf/">📁 binary-armhf/</a><div class="description">ARM hard-float packages</div></li>'
        generate_directory_index "templates/directory.html" "dists/testing/main/index.html" "Testing/Main" "Testing - Main Component" "Binary packages for different architectures:" "$breadcrumb" "$content"
        
        # Create binary architecture pages for stable/main
        for arch in amd64 arm64 armhf; do
          breadcrumb='<div class="breadcrumb"><a href="../">← Back to Main</a></div>'
          content='<li><a href="Packages">📄 Packages</a><div class="description">Package list</div></li><li><a href="Packages.gz">📄 Packages.gz</a><div class="description">Compressed package list</div></li><li><a href="Release">📄 Release</a><div class="description">Release information</div></li>'
          generate_directory_index "templates/directory.html" "dists/stable/main/binary-$arch/index.html" "Stable/Main/$arch" "Stable - Main - $arch" "Package metadata files for $arch architecture:" "$breadcrumb" "$content"
        done
        
        # Create binary architecture pages for testing/main
        for arch in amd64 arm64 armhf; do
          breadcrumb='<div class="breadcrumb"><a href="../">← Back to Main</a></div>'
          content='<li><a href="Packages">📄 Packages</a><div class="description">Package list</div></li><li><a href="Packages.gz">📄 Packages.gz</a><div class="description">Compressed package list</div></li><li><a href="Release">📄 Release</a><div class="description">Release information</div></li>'
          generate_directory_index "templates/directory.html" "dists/testing/main/binary-$arch/index.html" "Testing/Main/$arch" "Testing - Main - $arch" "Package metadata files for $arch architecture:" "$breadcrumb" "$content"
        done
        
        # Generate dynamic content for pool directories
        if [ -d "pool/main" ]; then
          breadcrumb='<div class="breadcrumb"><a href="../">← Back to Pool</a></div>'
          content=""
          for dir in pool/main/*/; do
            if [ -d "$dir" ]; then
              dirname=$(basename "$dir")
              content="$content<li><a href=\"$dirname/\">📁 $dirname/</a><div class=\"description\">Packages starting with '$dirname'</div></li>"
            fi
          done
          generate_directory_index "templates/directory.html" "pool/main/index.html" "Main Component Pool" "Main Component Pool" "Packages organized by first letter:" "$breadcrumb" "$content"
        fi
        
        # Create index pages for letter directories and package directories
        find pool -type d -mindepth 2 | while read -r dir; do
          if [ -d "$dir" ]; then
            letter=$(basename "$(dirname "$dir")")
            if [ "$(dirname "$dir")" = "pool/main" ]; then
              # This is a letter directory like pool/main/p/
              breadcrumb='<div class="breadcrumb"><a href="../">← Back to Main Pool</a></div>'
              content=""
              for pkg_dir in "$dir"/*; do
                if [ -d "$pkg_dir" ]; then
                  pkg_name=$(basename "$pkg_dir")
                  content="$content<li><a href=\"$pkg_name/\">📁 $pkg_name/</a><div class=\"description\">Package directory</div></li>"
                fi
              done
              generate_directory_index "templates/directory.html" "$dir/index.html" "Packages starting with '$letter'" "Packages starting with '$letter'" "Available packages:" "$breadcrumb" "$content"
            else
              # This is a package directory like pool/main/p/pypi-package-updater/
              pkg_name=$(basename "$dir")
              breadcrumb='<div class="breadcrumb"><a href="../">← Back to $(basename "$(dirname "$dir")")</a></div>'
              content=""
              for file in "$dir"/*.deb; do
                if [ -f "$file" ]; then
                  filename=$(basename "$file")
                  content="$content<li><a href=\"$filename\">📦 $filename</a><div class=\"description\">Debian package</div></li>"
                fi
              done
              generate_directory_index "templates/directory.html" "$dir/index.html" "$pkg_name" "Package: $pkg_name" "Available package files:" "$breadcrumb" "$content"
            fi
          fi
        done
        
        echo "Generated all directory index pages from templates"

    - name: Upload Pages artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: .

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build-repository
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
